services:
  postgres:
    container_name: postgres
    image: postgres:14.1
    environment:
      POSTGRES_USER: notenger
      POSTGRES_PASSWORD: password
      PGDATA: /data/postgres
    volumes:
      - postgres:/data/postgres
    ports:
      - "5332:5432"
    networks:
      - postgres
    restart: unless-stopped

  mongo:
    container_name: mongo
    image: mongo:latest
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: notenger
      MONGO_INITDB_ROOT_PASSWORD: password
      MONGO_INITDB_DATABASE: telematics
    ports:
      - "27017:27017"
    networks:
      - mongo

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9093:9090"
    networks:
      - spring

  grafana:
    image: grafana/grafana:9.5.2
    container_name: grafana
    restart: unless-stopped
    ports:
      - "3003:3000"
    volumes:
      - ./monitoring/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
    networks:
      - spring
    depends_on:
      - prometheus

  rabbitmq:
    image: rabbitmq:3.9.11-management-alpine
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
      - "15671:15671"
      - "61613:61613"
    networks:
      - spring

  keycloak:
    image: quay.io/keycloak/keycloak:22.0.4
    command:
      - start-dev
      - --import-realm
    ports:
      - "9081:8080"
    restart: unless-stopped
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    volumes:
      - ./keycloak-config/:/opt/keycloak/data/import/
    networks:
      - spring

  eureka-server:
    image: notenger/eureka-server:29.08.2024.08.52.48
    container_name: eureka-server
    ports:
      - "8761:8761"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    networks:
      - spring

  apigw:
    image: notenger/apigw:29.08.2024.12.32.32
    container_name: apigw
    ports:
      - "9090:9090"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER_URI=https://cognito-idp.eu-central-1.amazonaws.com/eu-central-1_mRlYi1e69
    networks:
      - spring
    depends_on:
      - eureka-server
      - keycloak

  vehicle:
    image: public.ecr.aws/b2y2j9p6/vehicle:18.10.2024.12.51.30
    container_name: vehicle
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - CLIENTS_DEVICE_URL=http://simulation:8081
    networks:
      - spring
      - postgres
    depends_on:
      - postgres

  simulation:
    image: public.ecr.aws/b2y2j9p6/simulation:18.10.2024.11.53.26
    container_name: simulation
    ports:
      - "8081:8081"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    networks:
      - spring
    depends_on:
      - postgres
      - rabbitmq

  telematics:
    image: public.ecr.aws/b2y2j9p6/telematics:18.10.2024.11.53.29
    container_name: telematics
    ports:
      - "8082:8082"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    networks:
      - spring
      - mongo
    depends_on:
      - mongo
      - rabbitmq

networks:
  postgres:
    driver: bridge
  mongo:
    driver: bridge
  spring:
    driver: bridge

volumes:
  postgres: